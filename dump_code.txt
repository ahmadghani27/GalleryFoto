<x-guest-layout>
    <!-- Session Status -->
    <x-auth-session-status class="mb-4" :status="session('status')" />

    <form method="POST" action="{{ route('login') }}">
        @csrf

        <!-- Email Address -->
        <div>
            <x-input-label for="email" :value="__('Email')" />
            <x-text-input id="email" class="block mt-1 w-full" type="email" name="email" :value="old('email')" required autofocus autocomplete="username" />
            <x-input-error :messages="$errors->get('email')" class="mt-2" />
        </div>

        <!-- Password -->
        <div class="mt-4">
            <x-input-label for="password" :value="__('Password')" />

            <x-text-input id="password" class="block mt-1 w-full"
                            type="password"
                            name="password"
                            required autocomplete="current-password" />

            <x-input-error :messages="$errors->get('password')" class="mt-2" />
        </div>

        <!-- Remember Me -->
        <div class="block mt-4">
            <label for="remember_me" class="inline-flex items-center">
                <input id="remember_me" type="checkbox" class="rounded border-gray-300 text-indigo-600 shadow-sm focus:ring-indigo-500" name="remember">
                <span class="ms-2 text-sm text-gray-600">{{ __('Remember me') }}</span>
            </label>
        </div>

        <div class="flex items-center justify-end mt-4">
            @if (Route::has('password.request'))
                <a class="underline text-sm text-gray-600 hover:text-gray-900 rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500" href="{{ route('password.request') }}">
                    {{ __('Forgot your password?') }}
                </a>
            @endif

            <x-primary-button class="ms-3">
                {{ __('Log in') }}
            </x-primary-button>
        </div>
    </form>
</x-guest-layout>

@extends('layouts.sidebar')

@section('content')
<div class="flex flex-col gap-4 px-[5%]">
    <!-- Elemen Sticky untuk Pencarian dan Filter -->
    <div class="sticky top-0 z-40 bg-gray-100 px-[5%] py-4 md:shadow-md transition-shadow duration-200">
        <div class="w-full h-16 px-5 bg-white rounded-[999px] outline outline-1 outline-offset-[-1px] outline-black/10 flex justify-between items-center">
            <div class="flex justify-start items-center gap-4 w-full mr-3.5">
                <div class="w-6 h-6 bg-zinc-300"></div>
                <input
                    type="text"
                    name="search"
                    value="{{ request('search') ?? '' }}"
                    class="text-neutral-900 text-base font-normal font-inter w-full border-none outline-none bg-transparent focus:outline-none focus:ring-0"
                    placeholder="Cari foto..."
                />
            </div>
            <div class="w-3.5 h-3.5 bg-zinc-900"></div>
        </div>
        <!-- Bagian Filter dan Informasi -->
        <div class="w-full flex justify-between items-center mt-3">
            <div class="text-black text-xl font-normal font-inter">Menampilkan {{ $photos->count() }} Foto</div>
            <div class="flex justify-end items-center gap-5">
                @if(auth()->check() && auth()->user()->role === 'admin')
                    <div class="h-14 px-5 py-5 bg-white rounded-2xl outline outline-1 outline-offset-[-1px] outline-black/10 flex justify-start items-center gap-2">
                        <div class="w-5 h-4 bg-neutral-900"></div>
                        <div class="text-neutral-900 text-base font-normal font-inter">Sort (Terbaru)</div>
                    </div>
                @endif
                <div class="p-4 bg-neutral-900 rounded-[999px] flex justify-start items-center gap-2.5">
                    <div class="w-3.5 h-3.5 bg-white"></div>
                </div>
            </div>
        </div>
    </div>

    <!-- Judul Pencarian -->
    @if(request('search'))
        <div class="self-stretch justify-start text-black text-xl font-medium font-inter">“{{ request('search') }}”</div>
    @endif

    <!-- Grid Gambar -->
    <div class="grid grid-cols-[repeat(auto-fill,minmax(240px,1fr))] gap-3 justify-items-start max-w-full md:justify-items-stretch">
        @forelse($photos as $photo)
            <div class="aspect-square rounded-md overflow-hidden">
                <img src="{{ asset($photo->path) }}" alt="{{ $photo->title ?? 'Photo' }}" class="w-full h-full object-cover min-w-[240px] max-w-[400px]">
            </div>
        @empty
            <div class="col-span-full text-center text-gray-500 text-lg">Tidak ada foto ditemukan.</div>
        @endforelse
    </div>
</div>
@endsection


<!-- dibawah ini jika sudah dihubungkan dengan database -->
    <!-- <div class="grid grid-cols-[repeat(auto-fill,minmax(240px,1fr))] gap-3 justify-items-start max-w-full md:justify-items-stretch">
        @foreach($photos as $photo)
        <div class="aspect-square rounded-md overflow-hidden">
            <img src="{{ asset($photo->path) }}" alt="{{ $photo->alt_text }}" class="w-full h-full object-cover min-w-[240px] max-w-[400px]">
        </div>
        @endforeach
    </div> -->


    <?php
// database/migrations/YYYY_MM_DD_HHMMSS_create_users_table.php
use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateUsersTable extends Migration
{
    public function up()
    {
        Schema::create('users', function (Blueprint $table) {
            $table->bigIncrements('id');
            $table->string('username')->unique();
            $table->string('password');
            $table->timestamps();
        });
    }

    public function down()
    {
        Schema::dropIfExists('users');
    }
}

<?php
// database/migrations/YYYY_MM_DD_HHMMSS_create_folders_table.php
use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateFoldersTable extends Migration
{
    public function up()
    {
        Schema::create('folders', function (Blueprint $table) {
            $table->bigIncrements('id');
            $table->unsignedBigInteger('user_id');
            $table->string('name');
            $table->string('folder_key')->unique();
            $table->timestamps();
            $table->foreign('user_id')->references('id')->on('users')->onDelete('cascade');
            $table->index('name');
            $table->index('folder_key');
        });
    }

    public function down()
    {
        Schema::dropIfExists('folders');
    }
}

<?php
// database/migrations/YYYY_MM_DD_HHMMSS_create_archives_table.php
use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateArchivesTable extends Migration
{
    public function up()
    {
        Schema::create('archives', function (Blueprint $table) {
            $table->bigIncrements('id');
            $table->unsignedBigInteger('user_id');
            $table->unsignedBigInteger('photo_id');
            $table->string('photo_table');
            $table->string('sandi');
            $table->timestamps();
            $table->foreign('user_id')->references('id')->on('users')->onDelete('cascade');
        });
    }

    public function down()
    {
        Schema::dropIfExists('archives');
    }
}

<?php
// app/Observers/UserObserver.php
namespace App\Observers;

use App\Models\User;
use Illuminate\Support\Facades\Schema;
use Illuminate\Database\Schema\Blueprint;

class UserObserver
{
    public function created(User $user)
    {
        // Create a photos_{username} table for the new user
        $tableName = 'photos_' . strtolower(str_replace(' ', '_', $user->username));
        Schema::create($tableName, function (Blueprint $table) {
            $table->bigIncrements('id');
            $table->unsignedBigInteger('folder_id')->nullable();
            $table->string('title');
            $table->string('url');
            $table->unsignedBigInteger('size'); // Size in bytes
            $table->boolean('is_favorite')->default(false);
            $table->timestamps();
            $table->foreign('folder_id')->references('id')->on('folders')->onDelete('set null');
            $table->index('title');
        });
    }

    public function deleting(User $user)
    {
        // Drop the photos_{username} table when the user is deleted
        $tableName = 'photos_' . strtolower(str_replace(' ', '_', $user->username));
        Schema::dropIfExists($tableName);
    }
}

<?php
// app/Providers/AppServiceProvider.php (partial, to register the observer)
namespace App\Providers;

use App\Models\User;
use App\Observers\UserObserver;
use Illuminate\Support\ServiceProvider;

class AppServiceProvider extends ServiceProvider
{
    public function boot()
    {
        User::observe(UserObserver::class);
    }
}